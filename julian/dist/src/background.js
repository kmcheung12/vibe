(function(){"use strict";const r=typeof browser<"u"?browser:chrome;function m(){r.contextMenus.create({id:"askJulian",title:"Ask Julian",contexts:["selection"]}),r.contextMenus.create({id:"summarize",title:"Summarize Page",contexts:["page"]}),r.contextMenus.create({id:"generate",title:"Generate with Julian",contexts:["selection"]})}r.runtime.onInstalled.addListener(()=>{m()}),typeof browser<"u"&&m(),r.contextMenus.onClicked.addListener((e,n)=>{switch(e.menuItemId){case"askJulian":e.selectionText&&y(e.selectionText,n.id);break;case"summarize":r.tabs.sendMessage(n.id,{action:"summarize",tabId:n.id});break;case"generate":e.selectionText&&b(e.selectionText,n.id);break}}),r.runtime.onMessage.addListener((e,n,i)=>{if(console.log("Received message:",e),e.action==="summarize")return(typeof browser<"u"?r.storage.sync.get(["llmConfig","promptRecipes"]):new Promise(t=>{r.storage.sync.get(["llmConfig","promptRecipes"],t)})).then(t=>{var s;const c=(((s=t.promptRecipes)==null?void 0:s.find(p=>p.name==="Summarize Page"))||{prompt:"Summarize the following text: {text}"}).prompt.replace("{text}",e.text);return h(t.llmConfig||f(),c)}).then(t=>{r.tabs.sendMessage(e.tabId,{action:"showResponse",text:t.generated_text||t,type:"summarize"}),i({success:!0})}).catch(t=>{r.tabs.sendMessage(e.tabId,{action:"showError",error:t.toString()}),i({success:!1,error:t.toString()})}),!0;if(e.action==="askJulian"||e.action==="generate")return(typeof browser<"u"?r.storage.sync.get(["llmConfig","promptRecipes"]):new Promise(t=>{r.storage.sync.get(["llmConfig","promptRecipes"],t)})).then(t=>{var l;const u=e.action==="askJulian"?"Ask Julian":"Generate Text",c=e.action==="askJulian"?"Answer the following question: {text}":"Generate text based on: {text}",s=((l=t.promptRecipes)==null?void 0:l.find(g=>g.name===u))||{prompt:c};console.log("Recipe:",s);const p=s.prompt.replace("{text}",e.text);return h(t.llmConfig||f(),p)}).then(t=>{r.tabs.sendMessage(e.tabId,{action:"showResponse",text:t.generated_text||t,type:e.action}),i({success:!0})}).catch(t=>{console.error("Error in background script:",t),r.tabs.sendMessage(e.tabId,{action:"showError",error:t.toString()}),i({success:!1,error:t.toString()})}),!0;if(e.action==="getCurrentTabId")return n.tab&&i({tabId:n.tab.id}),!0});function y(e,n){r.tabs.sendMessage(n,{action:"askJulian",text:e,tabId:n})}function b(e,n){r.tabs.sendMessage(n,{action:"generate",text:e,tabId:n})}function f(){return{provider:"huggingface",apiKey:"",model:"facebook/bart-large-cnn"}}function h(e,n){return new Promise((i,a)=>{(typeof browser<"u"?r.storage.sync.get(["providerApiKeys","apiKeyUsage"]):new Promise(u=>{r.storage.sync.get(["providerApiKeys","apiKeyUsage"],u)})).then(u=>{const c=u.providerApiKeys||{};u.apiKeyUsage;let s=e.apiKey,p=e.provider;if(e.provider==="huggingface"&&c.huggingface?s=c.huggingface:e.provider==="custom"&&c.custom?s=c.custom:Object.entries(c).forEach(([o,x])=>{o!=="huggingface"&&o!=="custom"&&o!=="ollama"&&e.customUrl&&e.customUrl.includes(o)&&(s=x,p=o)}),!s&&e.provider!=="ollama"){a(new Error("API key not set. Please configure in options."));return}let l,g,d={"Content-Type":"application/json"};switch(e.provider){case"huggingface":l=`https://api-inference.huggingface.co/models/${e.model||"facebook/bart-large-cnn"}`,d.Authorization=`Bearer ${s}`,g=JSON.stringify({inputs:n,options:{use_cache:!0,wait_for_model:!0}});break;case"ollama":l=e.customUrl||"http://localhost:11434/api/generate",g=JSON.stringify({model:e.model||"llama2",prompt:n,stream:!1});break;case"custom":if(!e.customUrl){a(new Error("Custom URL not set. Please configure in options."));return}l=e.customUrl,s&&(d.Authorization=`Bearer ${s}`),g=JSON.stringify({inputs:n});break;default:a(new Error("Unknown provider. Please configure in options."));return}fetch(l,{method:"POST",headers:d,body:g}).then(o=>{if(!o.ok)throw new Error(`API request failed with status ${o.status}`);return o.json()}).then(o=>{w(p),e.provider==="ollama"?i({generated_text:o.response}):i(o)}).catch(o=>{a(o)})})})}function w(e){(typeof browser<"u"?r.storage.sync.get(["apiKeyUsage"]):new Promise(i=>{r.storage.sync.get(["apiKeyUsage"],i)})).then(i=>{const a=i.apiKeyUsage||{};a[e]||(a[e]={}),a[e].lastUsed=new Date().toISOString(),r.storage.sync.set({apiKeyUsage:a})})}})();
